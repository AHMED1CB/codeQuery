DROP DATABASE IF EXISTS `codequery`;
CREATE DATABASE `codequery`;
USE `codequery`;
--  Users
CREATE TABLE `users`(
    id BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    full_name VARCHAR (255) NOT NULL,
    username VARCHAR (255) NOT NULL UNIQUE,
    bio TEXT NULL,
    avatar VARCHAR (255) NOT NULL DEFAULT 'user.png',
    reputation INT DEFAULT 0,
    email VARCHAR (255) NOT NULL UNIQUE,
    password VARCHAR (255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);



-- Questions
CREATE TABLE `questions`(
    id BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    creator_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (`creator_id`) REFERENCES `users`(`id`)
);
-- Answers
CREATE TABLE `answers`(
    id BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    creator_id BIGINT NOT NULL,
    answer TEXT NOT NULL,
    question_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (`creator_id`) REFERENCES `users`(`id`),
    FOREIGN KEY (`question_id`) REFERENCES `questions`(`id`) ON DELETE CASCADE
);
-- Replies
CREATE TABLE `replies`(
    id BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    creator_id BIGINT NOT NULL,
    answer_id BIGINT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (`creator_id`) REFERENCES `users`(`id`),
    FOREIGN KEY (`answer_id`) REFERENCES `answers`(`id`) ON DELETE CASCADE
);
-- Tags
CREATE TABLE `tags`(
    id BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
-- question Tags
CREATE TABLE `question_tags`(
    id BIGINT PRIMARY KEY NOT NULL,

    question_id BIGINT NOT NULL ,
    
    tag_id BIGINT NOT NULL ,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (`question_id`) REFERENCES `questions`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`tag_id`) REFERENCES `tags`(`id`) ON DELETE CASCADE ,
    UNIQUE (question_id, tag_id)

);
-- Votes
CREATE TABLE `votes`(
    id BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    question_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    type ENUM("UP", 'DOWN'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`),
    FOREIGN KEY (`question_id`) REFERENCES `questions`(`id`)
);

